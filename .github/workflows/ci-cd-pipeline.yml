name: CI/CD Pipeline with Cloud Deployment

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Choose deployment target (only on main/master)'
        required: false
        type: choice
        default: 'docker-hub'
        options:
          - docker-hub
          - render
          - railway
          - all
          - none

permissions:
  contents: read
  packages: write

env:
  DOCKER_IMAGE_NAME: image-processing-app
  REGISTRY: ghcr.io
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================
  # STAGE 1: Build & Install Dependencies
  # ============================================
  build-and-install:
    name: 'Stage 1: Build & Install'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Verify installation
        run: |
          python --version
          pip list
          echo "✅ All dependencies installed successfully"
      
      - name: Cache installed packages for next stages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}

  # ============================================
  # STAGE 2: Lint & Security Scan
  # ============================================
  lint-and-security:
    name: 'Stage 2: Lint & Security Scan'
    runs-on: ubuntu-latest
    needs: build-and-install
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install linting and security tools
        run: |
          pip install flake8 bandit
      
      - name: Run Flake8 (Linting)
        run: |
          echo "🔍 Running Flake8 linter..."
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run Bandit (Security Scan)
        run: |
          echo "🔒 Running Bandit security scan..."
          bandit -r app/ -ll || true
      
      - name: Security Summary
        run: |
          echo "### 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Flake8 linting completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bandit security scan completed" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # STAGE 3: Test (with PostgreSQL Service)
  # ============================================
  test:
    name: 'Stage 3: Test with Database'
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    # PostgreSQL service container
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_image_processing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # RabbitMQ service for Celery (optional, if needed for tests)
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_image_processing
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_image_processing
      CELERY_BROKER_URL: amqp://guest:guest@localhost:5672//
      SECRET_KEY: test-secret-key
      UPLOAD_FOLDER: /tmp/test_uploads
      IMAGE_OUTPUT_DIR: /tmp/test_output_images
      OUTPUT_CSV_DIR: /tmp/test_output_csvs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Wait for PostgreSQL
        run: |
          echo "⏳ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
      
      - name: Verify Database Connection
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_image_processing -c "SELECT version();"
      
      - name: Initialize Database Schema
        run: |
          echo "🗄️ Setting up database schema..."
          python -c "
          from app import create_app
          from app.models import db
          app = create_app()
          with app.app_context():
              db.create_all()
              print('✅ Database schema created successfully')
          "
      
      - name: Run Tests with Coverage
        run: |
          echo "🧪 Running tests with coverage..."
          pytest tests/ -v --cov=app --cov-report=term-missing
      
      - name: Test Summary
        if: always()
        run: |
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Database: PostgreSQL 15" >> $GITHUB_STEP_SUMMARY
          echo "- Message Broker: RabbitMQ 3" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # STAGE 4: Build Docker Image & Push to Docker Hub
  # ============================================
  build-docker:
    name: 'Stage 4: Build & Push to Docker Hub'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-
            type=ref,event=branch
      
      - name: Extract metadata for GitHub Container Registry
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push to Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push to GHCR (backup)
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Docker Build Summary
        run: |
          echo "### 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "- **Docker Hub:** ✅ Pushed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Repository:** ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tags:** ${{ steps.meta-dockerhub.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pull Command:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "- **GHCR:** Attempted (backup)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Not pushed (not on main branch)" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================
  # STAGE 5: Deploy to Render
  # ============================================
  deploy-to-render:
    name: 'Stage 5a: Deploy to Render'
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && 
        (github.event.inputs.deployment_target == 'render' || github.event.inputs.deployment_target == 'all')))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "🚀 Triggering Render deployment..."
          
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "⚠️ Render credentials not configured. Skipping deployment."
            echo "To enable: Set RENDER_API_KEY and RENDER_SERVICE_ID secrets."
            exit 0
          fi
          
          # Trigger Render deployment using API
          response=$(curl -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}')
          
          echo "Response: $response"
          echo "✅ Render deployment triggered successfully!"
      
      - name: Render Deployment Summary
        run: |
          echo "### 🎨 Render Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "**Status:** ⏭️ Skipped (credentials not configured)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ✅ Deployment triggered" >> $GITHUB_STEP_SUMMARY
            echo "**Service ID:** ${{ secrets.RENDER_SERVICE_ID }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Monitor your deployment at: https://dashboard.render.com" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================
  # STAGE 5b: Deploy to Railway
  # ============================================
  deploy-to-railway:
    name: 'Stage 5b: Deploy to Railway'
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && 
        (github.event.inputs.deployment_target == 'railway' || github.event.inputs.deployment_target == 'all')))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "🚂 Deploying to Railway..."
          
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "⚠️ Railway token not configured. Skipping deployment."
            echo "To enable: Set RAILWAY_TOKEN secret."
            exit 0
          fi
          
          # Deploy using Railway CLI
          railway up --detach
          
          echo "✅ Railway deployment completed successfully!"
      
      - name: Railway Deployment Summary
        run: |
          echo "### � Railway Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "**Status:** ⏭️ Skipped (token not configured)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ✅ Deployment completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Monitor your deployment at: https://railway.app/dashboard" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================
  # FINAL: Pipeline Summary
  # ============================================
  pipeline-summary:
    name: 'Pipeline Summary'
    runs-on: ubuntu-latest
    needs: [build-and-install, lint-and-security, test, build-docker, deploy-to-render, deploy-to-railway]
    if: always()
    
    steps:
      - name: Generate Pipeline Summary
        run: |
          echo "# 🎯 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 1️⃣ Build & Install | ${{ needs.build-and-install.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 2️⃣ Lint & Security | ${{ needs.lint-and-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 3️⃣ Test with DB | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 4️⃣ Build Docker | ${{ needs.build-docker.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 5️⃣ Deploy Render | ${{ needs.deploy-to-render.result == 'success' && '✅ Deployed' || needs.deploy-to-render.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 5️⃣ Deploy Railway | ${{ needs.deploy-to-railway.result == 'success' && '✅ Deployed' || needs.deploy-to-railway.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.build-and-install.result }}" == "success" && 
                "${{ needs.lint-and-security.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build-docker.result }}" == "success" ]]; then
            echo "### ✅ All core stages completed successfully!" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Docker Hub:** Image pushed to registry" >> $GITHUB_STEP_SUMMARY
              echo "**Render:** ${{ needs.deploy-to-render.result }}" >> $GITHUB_STEP_SUMMARY
              echo "**Railway:** ${{ needs.deploy-to-railway.result }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ⚠️ Some stages failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi

